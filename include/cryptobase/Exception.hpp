//
// Exception.h
//
// $Id: //poco/1.4/Foundation/include/Poco/Exception.h#2 $
//
// Library: Foundation
// Package: Core
// Module:  Exception
//
// Definition of various Poco exception classes.
//
// Copyright (c) 2004-2006, Applied Informatics Software Engineering GmbH.
// and Contributors.
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
// 
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
// 
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//
/*
 * Exception.hpp
 *
 *      Modified by: Giovani Milanez Espindola
 *	   Contact: giovani.milanez@gmail.com
 *	Modified on: 03/09/2013
 */

#ifndef cryptobase_Exception_INCLUDED
#define cryptobase_Exception_INCLUDED

#include "cryptobase/Defs.h"
#include <stdexcept>


namespace cryptobase {


class CRYPTOBASE_API Exception: public std::exception
	/// This is the base class for all exceptions defined
	/// in the Poco class library.
{
public:
	Exception(const std::string& msg, int code = 0);
		/// Creates an exception.

	Exception(const std::string& msg, const std::string& arg, int code = 0);
		/// Creates an exception.

	Exception(const std::string& msg, const Exception& nested, int code = 0);
		/// Creates an exception and stores a clone
		/// of the nested exception.

	Exception(const Exception& exc);
		/// Copy constructor.
		
	~Exception() throw();
		/// Destroys the exception and deletes the nested exception.

	Exception& operator = (const Exception& exc);
		/// Assignment operator.

	virtual const char* name() const throw();
		/// Returns a static string describing the exception.
		
	virtual const char* className() const throw();
		/// Returns the name of the exception class.
		
	virtual const char* what() const throw();
		/// Returns a static string describing the exception.
		///
		/// Same as name(), but for compatibility with std::exception.
		
	const Exception* nested() const;
		/// Returns a pointer to the nested exception, or
		/// null if no nested exception exists.
			
	const std::string& message() const;
		/// Returns the message text.
			
	int code() const;
		/// Returns the exception code if defined.
		
	std::string displayText() const;
		/// Returns a string consisting of the
		/// message name and the message text.

	virtual Exception* clone() const;
		/// Creates an exact copy of the exception.
		///
		/// The copy can later be thrown again by
		/// invoking rethrow() on it.
		
	virtual void rethrow() const;
		/// (Re)Throws the exception.
		///
		/// This is useful for temporarily storing a
		/// copy of an exception (see clone()), then
		/// throwing it again.

protected:
	Exception(int code = 0);
		/// Standard constructor.

	void message(const std::string& msg);
		/// Sets the message for the exception.

	void extendedMessage(const std::string& arg);
		/// Sets the extended message for the exception.
		
private:
	std::string _msg;
	Exception*  _pNested;
	int			_code;
};


//
// inlines
//
inline const Exception* Exception::nested() const
{
	return _pNested;
}


inline const std::string& Exception::message() const
{
	return _msg;
}


inline void Exception::message(const std::string& msg)
{
	_msg = msg;
}


inline int Exception::code() const
{
	return _code;
}


//
// Macros for quickly declaring and implementing exception classes.
// Unfortunately, we cannot use a template here because character
// pointers (which we need for specifying the exception name)
// are not allowed as template arguments.
//
#define CRYPTOBASE_DECLARE_EXCEPTION_CODE(API, CLS, BASE, CODE) \
	class API CLS: public BASE														\
	{																				\
	public:																			\
		CLS(int code = CODE);														\
		CLS(const std::string& msg, int code = CODE);								\
		CLS(const std::string& msg, const std::string& arg, int code = CODE);		\
		CLS(const std::string& msg, const cryptobase::Exception& exc, int code = CODE);	\
		CLS(const CLS& exc);														\
		~CLS() throw();																\
		CLS& operator = (const CLS& exc);											\
		const char* name() const throw();											\
		const char* className() const throw();										\
		cryptobase::Exception* clone() const;												\
		void rethrow() const;														\
	};

#define CRYPTOBASE_DECLARE_EXCEPTION(API, CLS, BASE) \
	CRYPTOBASE_DECLARE_EXCEPTION_CODE(API, CLS, BASE, 0)

#define CRYPTOBASE_IMPLEMENT_EXCEPTION(CLS, BASE, NAME)													\
	CLS::CLS(int code): BASE(code)																	\
	{																								\
	}																								\
	CLS::CLS(const std::string& msg, int code): BASE(msg, code)										\
	{																								\
	}																								\
	CLS::CLS(const std::string& msg, const std::string& arg, int code): BASE(msg, arg, code)		\
	{																								\
	}																								\
	CLS::CLS(const std::string& msg, const cryptobase::Exception& exc, int code): BASE(msg, exc, code)	\
	{																								\
	}																								\
	CLS::CLS(const CLS& exc): BASE(exc)																\
	{																								\
	}																								\
	CLS::~CLS() throw()																				\
	{																								\
	}																								\
	CLS& CLS::operator = (const CLS& exc)															\
	{																								\
		BASE::operator = (exc);																		\
		return *this;																				\
	}																								\
	const char* CLS::name() const throw()															\
	{																								\
		return NAME;																				\
	}																								\
	const char* CLS::className() const throw()														\
	{																								\
		return typeid(*this).name();																\
	}																								\
	cryptobase::Exception* CLS::clone() const																\
	{																								\
		return new CLS(*this);																		\
	}																								\
	void CLS::rethrow() const																		\
	{																								\
		throw *this;																				\
	}


//
// Standard exception classes
//
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, LogicException, Exception)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, AssertionViolationException, LogicException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, NullPointerException, LogicException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, NullValueException, LogicException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, BugcheckException, LogicException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, InvalidArgumentException, LogicException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, NotImplementedException, LogicException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, RangeException, LogicException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, IllegalStateException, LogicException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, InvalidAccessException, LogicException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, SignalException, LogicException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, UnhandledException, LogicException)

CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, RuntimeException, Exception)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, NotFoundException, RuntimeException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, ExistsException, RuntimeException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, TimeoutException, RuntimeException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, SystemException, RuntimeException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, RegularExpressionException, RuntimeException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, LibraryLoadException, RuntimeException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, LibraryAlreadyLoadedException, RuntimeException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, NoThreadAvailableException, RuntimeException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, PropertyNotSupportedException, RuntimeException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, PoolOverflowException, RuntimeException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, NoPermissionException, RuntimeException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, OutOfMemoryException, RuntimeException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, DataException, RuntimeException)

CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, DataFormatException, DataException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, SyntaxException, DataException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, CircularReferenceException, DataException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, PathSyntaxException, SyntaxException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, IOException, RuntimeException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, ProtocolException, IOException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, FileException, IOException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, FileExistsException, FileException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, FileNotFoundException, FileException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, PathNotFoundException, FileException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, FileReadOnlyException, FileException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, FileAccessDeniedException, FileException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, CreateFileException, FileException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, OpenFileException, FileException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, WriteFileException, FileException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, ReadFileException, FileException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, UnknownURISchemeException, RuntimeException)

CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, ApplicationException, Exception)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, BadCastException, RuntimeException)

CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, EncodeException, RuntimeException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, BufferWriteException, EncodeException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, BufferReadException, EncodeException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, PemDecodeException, EncodeException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, PemEncodeException, EncodeException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, DerDecodeException, EncodeException)
CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, DerEncodeException, EncodeException)

CRYPTOBASE_DECLARE_EXCEPTION(CRYPTOBASE_API, CertificateVerificationException, Exception)


} // namespace Poco


#endif // Foundation_Exception_INCLUDED
